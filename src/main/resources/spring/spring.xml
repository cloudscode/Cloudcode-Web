<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
        http://www.springframework.org/schema/jee 
        http://www.springframework.org/schema/jee/spring-jee-3.1.xsd         
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd  
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.1.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
        http://www.springframework.org/schema/cache 
     	http://www.springframework.org/schema/cache/spring-cache.xsd"
	default-lazy-init="false">
	
	<context:component-scan base-package="com.cloudcode"  use-default-filters="false">   
	     <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />   
	</context:component-scan>   

	
	<!-- <import resource="application-security.xml" /> -->
	<import resource="spring-security.xml"/>	
	<import resource="applicationContext-cxf.xml" />
	<bean
		class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer" />
	<context:annotation-config />
	

	<!-- 激活自动代理功能 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<!-- <aop:aspectj-autoproxy /> -->
	<bean class="spring.WebConfig" />
	
	<bean  id="dataSource"  class="com.p6spy.engine.spy.P6DataSource">
		<constructor-arg>
			<ref local="dataSourceTarget" />
		</constructor-arg>
	</bean>
	
	<bean id="dataSourceTarget" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="${dataSource.jndiName}" />
	</bean>
	 <bean id="DAOInterceptor" class="com.cloudcode.common.util.interceptor.DAOInterceptor" />

	<!-- 配置sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	 <property name="entityInterceptor">
			<ref bean="DAOInterceptor"/>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					${hibernate.dialect}
				</prop>
				<prop key="hibernate.show_sql">
					${hibernate.show_sql}
				</prop>
				<prop key="hibernate.format_sql">
					${hibernate.format_sql}
				</prop>
				<prop key="hibernate.use_sql_comments">
					${hibernate.use_sql_comments}
				</prop>
				<prop key="hibernate.jdbc.batch_size">
					${hibernate.jdbc.batch_size}
				</prop>
				<prop key="hibernate.max_fetch_depth">
					${hibernate.max_fetch_depth}
				</prop>
				<prop key="hibernate.jdbc.fetch_size">
					${hibernate.jdbc.fetch_size}
				</prop>
				<prop key="hibernate.cache.use_query_cache">
					${hibernate.cache.use_query_cache}
				</prop>
				<prop key="hibernate.cache.provider_class">
					${hibernate.cache.provider_class}
				</prop>
				<prop key="hibernate.cache.region.factory_class">
					${hibernate.cache.region.factory_class}
				</prop>
				<prop key="hibernate.order_updates">
					${hibernate.order_updates}
				</prop>
				<prop key="hibernate.query.factory_class">
					${hibernate.query.factory_class}
				</prop>
				<prop key="hibernate.cache.use_second_level_cache">
					${hibernate.cache.use_second_level_cache}
				</prop>
				<prop key="hibernate.current_session_context_class">
					${hibernate.current_session_context_class}
				</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">
					${hibernate.temp.use_jdbc_metadata_defaults}
				</prop>
				<prop key="hibernate.hbm2ddl.auto">
					${hibernate.hbm2ddl.auto}
				</prop>
				<prop key="hibernate.default_schema">
					${hibernate.default_schema}
				</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
			</props>
		</property>

		<property name="packagesToScan">
			<ref bean="hibernate.packagesToScan" />
		</property>
	</bean>
	<!-- 定义事务管理 -->
	
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory">
		</property>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	<!-- 定义 Autowired 自动注入 bean -->
	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			事务执行方式 REQUIRED：指定当前方法必需在事务环境中运行， 如果当前有事务环境就加入当前正在执行的事务环境， 如果当前没有事务，就新建一个事务。 
				这是默认值。
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="import*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="REQUIRED" />
			
			指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。 查询定义即可 
				read-only="true" 表示只读
			<tx:method name="*" read-only="true" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice> -->

	<!-- 定义切面，在 * com.*.dao.*(..) 中执行有关的hibernate session的事务操作 -->
	<!-- <aop:config>
		<aop:pointcut id="serviceOperation" expression="execution(* *.*.*.dao.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config> -->
	<!-- <aop:config> 
                <aop:pointcut id="serviceOperation" 
                                            expression="execution(* *.*.*.dao.*.*(..))"/> 
                <aop:advisor pointcut-ref="serviceOperation" 
                                         advice-ref="txAdvice"/> 
                                          
        </aop:config> -->
       <!--  <aop:config> 
                <aop:pointcut id="serviceOperation1" 
                                            expression="execution(* *.*.*.dao.*.*(..))"/> 
                <aop:advisor pointcut-ref="serviceOperation1" 
                                         advice-ref="txAdvice"/> 
                                          
        </aop:config> -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
		<property name="maxRows" value="10000"></property>
	</bean>
	
	<!-- 国际化 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
  		<property name="basename" value="classpath:config/messages" />
 	</bean>
 	<!-- spring cache -->
 	<cache:annotation-driven cache-manager="cacheManager" proxy-target-class="true"/>  
	<bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
	    <property name="configLocation" value="classpath:spring/ehcache.xml"/>  
	</bean>  
	  
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">  
	    <property name="cacheManager" ref="ehcacheManager"/>  
	    <property name="transactionAware" value="true"/>  
	</bean>  
	
</beans>